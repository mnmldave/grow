(function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "ArithmeticExpression": parse_ArithmeticExpression,
        "ArithmeticOperator": parse_ArithmeticOperator,
        "ArithmeticValue": parse_ArithmeticValue,
        "Branch": parse_Branch,
        "Command": parse_Command,
        "Float": parse_Float,
        "Identifier": parse_Identifier,
        "Integer": parse_Integer,
        "Module": parse_Module,
        "Number": parse_Number,
        "Parameter": parse_Parameter,
        "ParameterList": parse_ParameterList,
        "Production": parse_Production,
        "RelationalExpression": parse_RelationalExpression,
        "RelationalOperator": parse_RelationalOperator,
        "Statement": parse_Statement,
        "StatementList": parse_StatementList
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Production";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_Production() {
        var cacheKey = 'Production@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var result38 = parse_Number();
        var result35 = result38 !== null ? result38 : '';
        if (result35 !== null) {
          if (input.substr(pos, 2) === "->") {
            var result36 = "->";
            pos += 2;
          } else {
            var result36 = null;
            if (reportMatchFailures) {
              matchFailed("\"->\"");
            }
          }
          if (result36 !== null) {
            var result37 = parse_StatementList();
            if (result37 !== null) {
              var result34 = [result35, result36, result37];
            } else {
              var result34 = null;
              pos = savedPos4;
            }
          } else {
            var result34 = null;
            pos = savedPos4;
          }
        } else {
          var result34 = null;
          pos = savedPos4;
        }
        var result33 = result34 !== null
          ? (function(probability, successor) {
                var result = {};
                
                if (probability) {
                  result.probability = probability;
                }
                result.successor = successor;
                
                return result;
              })(result34[0], result34[2])
          : null;
        if (result33 !== null) {
          var result0 = result33;
        } else {
          var savedPos3 = pos;
          var result26 = parse_Command();
          if (result26 !== null) {
            if (input.substr(pos, 1) === "<") {
              var result27 = "<";
              pos += 1;
            } else {
              var result27 = null;
              if (reportMatchFailures) {
                matchFailed("\"<\"");
              }
            }
            if (result27 !== null) {
              var result28 = parse_Command();
              if (result28 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result29 = ">";
                  pos += 1;
                } else {
                  var result29 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result29 !== null) {
                  var result30 = parse_Command();
                  if (result30 !== null) {
                    if (input.substr(pos, 2) === "->") {
                      var result31 = "->";
                      pos += 2;
                    } else {
                      var result31 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"->\"");
                      }
                    }
                    if (result31 !== null) {
                      var result32 = parse_StatementList();
                      if (result32 !== null) {
                        var result25 = [result26, result27, result28, result29, result30, result31, result32];
                      } else {
                        var result25 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result25 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result25 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos3;
                }
              } else {
                var result25 = null;
                pos = savedPos3;
              }
            } else {
              var result25 = null;
              pos = savedPos3;
            }
          } else {
            var result25 = null;
            pos = savedPos3;
          }
          var result24 = result25 !== null
            ? (function(after, c, before, successor) {
                  var result = {};
                  
                  result.after = after;
                  result.before = before;
                  result.successor = successor;
                  
                  return result;
                })(result25[0], result25[2], result25[4], result25[6])
            : null;
          if (result24 !== null) {
            var result0 = result24;
          } else {
            var savedPos2 = pos;
            var result19 = parse_Command();
            if (result19 !== null) {
              if (input.substr(pos, 1) === "<") {
                var result20 = "<";
                pos += 1;
              } else {
                var result20 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<\"");
                }
              }
              if (result20 !== null) {
                var result21 = parse_Command();
                if (result21 !== null) {
                  if (input.substr(pos, 2) === "->") {
                    var result22 = "->";
                    pos += 2;
                  } else {
                    var result22 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"->\"");
                    }
                  }
                  if (result22 !== null) {
                    var result23 = parse_StatementList();
                    if (result23 !== null) {
                      var result18 = [result19, result20, result21, result22, result23];
                    } else {
                      var result18 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result18 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result18 = null;
                  pos = savedPos2;
                }
              } else {
                var result18 = null;
                pos = savedPos2;
              }
            } else {
              var result18 = null;
              pos = savedPos2;
            }
            var result17 = result18 !== null
              ? (function(after, c, successor) {
                    var result = {};
              
                    result.after = after;
                    result.successor = successor;
              
                    return result;
                  })(result18[0], result18[2], result18[4])
              : null;
            if (result17 !== null) {
              var result0 = result17;
            } else {
              var savedPos1 = pos;
              var result12 = parse_Command();
              if (result12 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result13 = ">";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result13 !== null) {
                  var result14 = parse_Command();
                  if (result14 !== null) {
                    if (input.substr(pos, 2) === "->") {
                      var result15 = "->";
                      pos += 2;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"->\"");
                      }
                    }
                    if (result15 !== null) {
                      var result16 = parse_StatementList();
                      if (result16 !== null) {
                        var result11 = [result12, result13, result14, result15, result16];
                      } else {
                        var result11 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result11 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos1;
                }
              } else {
                var result11 = null;
                pos = savedPos1;
              }
              var result10 = result11 !== null
                ? (function(c, before, successor) {
                      var result = {};
                
                      result.before = before;
                      result.successor = successor;
                
                      return result;
                    })(result11[0], result11[2], result11[4])
                : null;
              if (result10 !== null) {
                var result0 = result10;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 1) === "(") {
                  var result5 = "(";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result5 !== null) {
                  var result6 = parse_RelationalExpression();
                  if (result6 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result7 = ")";
                      pos += 1;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos, 2) === "->") {
                        var result8 = "->";
                        pos += 2;
                      } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"->\"");
                        }
                      }
                      if (result8 !== null) {
                        var result9 = parse_StatementList();
                        if (result9 !== null) {
                          var result4 = [result5, result6, result7, result8, result9];
                        } else {
                          var result4 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result4 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result4 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos0;
                }
                var result3 = result4 !== null
                  ? (function(condition, successor) {
                        var result = {};
                  
                        result.condition = condition;
                        result.successor = successor;
                  
                        return result;
                      })(result4[1], result4[4])
                  : null;
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  var result2 = parse_StatementList();
                  var result1 = result2 !== null
                    ? (function(program) {
                          return program;
                        })(result2)
                    : null;
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StatementList() {
        var cacheKey = 'StatementList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = [];
        var result2 = parse_Statement();
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_Statement();
        }
        var result0 = result1 !== null
          ? (function(statements) { 
                return statements;
              })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Statement() {
        var cacheKey = 'Statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_Branch();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Module();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Branch() {
        var cacheKey = 'Branch@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result2 = "[";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result2 !== null) {
          var result5 = parse_Statement();
          if (result5 !== null) {
            var result3 = [];
            while (result5 !== null) {
              result3.push(result5);
              var result5 = parse_Statement();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result4 = "]";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(statements) {
                return statements;
              })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Module() {
        var cacheKey = 'Module@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_Command();
        if (result2 !== null) {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result5 = "(";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result5 !== null) {
            var result6 = parse_ParameterList();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result7 = ")";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(command, params) {
                var result = {
                  c: command
                };
                
                if (params) {
                  result.p = params[1];
                }
                
                return result;
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ParameterList() {
        var cacheKey = 'ParameterList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_Parameter();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ",") {
            var result5 = ",";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          if (result5 !== null) {
            var result6 = parse_Parameter();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ",") {
              var result5 = ",";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_Parameter();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][1])
                }
                return result;
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Parameter() {
        var cacheKey = 'Parameter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_ArithmeticExpression();
        var result0 = result1 !== null
          ? (function(e) { return e; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Command() {
        var cacheKey = 'Command@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z0-9~`!@#$%^&*()_+-={}|<>,.\/?]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z0-9~`!@#$%^&*()_+-={}|<>,.\\/?]");
          }
        }
        var result0 = result1 !== null
          ? (function(c) { return c; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelationalExpression() {
        var cacheKey = 'RelationalExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_ArithmeticExpression();
        if (result2 !== null) {
          var result3 = parse_RelationalOperator();
          if (result3 !== null) {
            var result4 = parse_ArithmeticExpression();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(left, op, right) {
                return left + op + right;
              })(result1[0], result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelationalOperator() {
        var cacheKey = 'RelationalOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "<") {
          var result6 = "<";
          pos += 1;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 1) === ">") {
            var result5 = ">";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\">\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 2) === "<=") {
              var result4 = "<=";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"<=\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 2) === ">=") {
                var result3 = ">=";
                pos += 2;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\">=\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 2) === "==") {
                  var result2 = "==";
                  pos += 2;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"==\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos, 2) === "!=") {
                    var result1 = "!=";
                    pos += 2;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"!=\"");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ArithmeticExpression() {
        var cacheKey = 'ArithmeticExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result5 = "(";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result5 !== null) {
          var result6 = parse_ArithmeticExpression();
          if (result6 !== null) {
            var result7 = parse_ArithmeticOperator();
            if (result7 !== null) {
              var result8 = parse_ArithmeticExpression();
              if (result8 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result9 = ")";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result9 !== null) {
                  var result4 = [result5, result6, result7, result8, result9];
                } else {
                  var result4 = null;
                  pos = savedPos0;
                }
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(left, op, right) { return '(' + left + op + right + ')'; })(result4[1], result4[2], result4[3])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_ArithmeticValue();
          var result1 = result2 !== null
            ? (function(v) { return v; })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ArithmeticOperator() {
        var cacheKey = 'ArithmeticOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "+") {
          var result5 = "+";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result4 = "-";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 1) === "*") {
              var result3 = "*";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 1) === "/") {
                var result2 = "/";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 1) === "^") {
                  var result1 = "^";
                  pos += 1;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"^\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ArithmeticValue() {
        var cacheKey = 'ArithmeticValue@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_Identifier();
        var result3 = result4 !== null
          ? (function(v) { return v; })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_Number();
          var result1 = result2 !== null
            ? (function(n) { return n; })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Number() {
        var cacheKey = 'Number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_Float();
        var result3 = result4 !== null
          ? (function(n) { return n; })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_Integer();
          var result1 = result2 !== null
            ? (function(n) { return n; })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Identifier() {
        var cacheKey = 'Identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z0-9]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(before, after) { return before + after.join(''); })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Integer() {
        var cacheKey = 'Integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[+\-]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[+\\-]");
          }
        }
        var result2 = result5 !== null ? result5 : '';
        if (result2 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result4 !== null) {
            var result3 = [];
            while (result4 !== null) {
              result3.push(result4);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sign, digits) { return parseInt(sign + digits.join(""), 10); })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Float() {
        var cacheKey = 'Float@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[+\-]/) !== null) {
          var result8 = input.charAt(pos);
          pos++;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("[+\\-]");
          }
        }
        var result2 = result8 !== null ? result8 : '';
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          while (result7 !== null) {
            result3.push(result7);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result4 = ".";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result4 !== null) {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result6 !== null) {
                var result5 = [];
                while (result6 !== null) {
                  result5.push(result6);
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sign, before, after) {
                return parseFloat(sign + before.join("") + "." + after.join(""));
              })(result1[0], result1[1], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  jQuery.extend(exports, result);
})();
